name: PR Review Management

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request:
    types: [opened]
  workflow_dispatch:

jobs:
  manage-reviews:
    permissions:
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get PR Details and Comments
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            // Determine PR number based on event type
            let prNumber;
            
            if (context.eventName === 'pull_request') {
              prNumber = context.payload.pull_request.number;
            } else if (context.eventName === 'issue_comment') {
              // Check if the comment is on a PR
              if (!context.payload.issue.pull_request) {
                console.log('Comment is not on a PR, skipping');
                return;
              }
              prNumber = context.payload.issue.number;
            } else if (context.eventName === 'pull_request_review_comment') {
              prNumber = context.payload.pull_request.number;
            } else {
              console.log('Unsupported event type:', context.eventName);
              return;
            }
            
            console.log('Processing PR number:', prNumber);
            
            try {
              // Get PR details
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              // Get all comments (both issue comments and review comments)
              const issueComments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber
              });
              
              const reviewComments = await github.rest.pulls.listReviewComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              const totalComments = issueComments.data.length + reviewComments.data.length;
              
              return {
                commentCount: totalComments,
                prUrl: pr.data.html_url,
                title: pr.data.title,
                prNumber: prNumber,
                currentReviewers: pr.data.requested_reviewers?.map(r => r.login) || []
              };
            } catch (error) {
              console.error('Error fetching PR details:', error);
              throw error;
            }

      - name: Manage Reviewers
        if: ${{ steps.pr-details.outputs.result != '' }}
        uses: actions/github-script@v7
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          COMMENT_THRESHOLD: 5
        with:
          script: |
            const prDetails = ${{ steps.pr-details.outputs.result }};
            
            // Define reviewers with their seniority levels
            const reviewers = {
              senior: [
                {github: 'senior-dev1', slack: 'U123ABC'},
                {github: 'senior-dev2', slack: 'U456DEF'}
              ],
              junior: [
                {github: 'junior-dev1', slack: 'U789GHI'},
                {github: 'junior-dev2', slack: 'U012JKL'}
              ]
            };
            
            // Check if PR needs senior review based on comment count
            if (prDetails.commentCount > process.env.COMMENT_THRESHOLD) {
              // Filter out reviewers that are already assigned
              const newReviewers = reviewers.senior
                .map(r => r.github)
                .filter(reviewer => !prDetails.currentReviewers.includes(reviewer));
              
              if (newReviewers.length > 0) {
                // Add senior reviewers
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prDetails.prNumber,
                  reviewers: newReviewers
                });
                
                // Add comment mentioning senior reviewers
                const reviewerMentions = newReviewers.map(r => '@' + r).join(' ');
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prDetails.prNumber,
                  body: `Due to the high number of comments (${prDetails.commentCount}), requesting additional review from senior developers: ${reviewerMentions}`
                });
                
                // Send Slack notifications
                const axios = require('axios');
                for (const reviewer of reviewers.senior.filter(r => newReviewers.includes(r.github))) {
                  const slackMessage = {
                    text: `Hey <@${reviewer.slack}>! You've been added as a reviewer to PR: ${prDetails.title}\n${prDetails.prUrl}`
                  };
                  
                  await axios.post(process.env.SLACK_WEBHOOK, slackMessage);
                }
              }
            }

      - name: Check Dependencies
        run: |
          npm install axios